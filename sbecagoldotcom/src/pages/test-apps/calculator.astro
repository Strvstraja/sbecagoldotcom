---
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/png" sizes="48x48" href="/images/sbecagolfav48.png" />
    <title>Calculator - Test Apps</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
      :root {
        --text: #e2e8f0;
        --muted: #94a3b8;
        --bg: #0f172a;
        --surface: #1e293b;
        --border: #334155;
        --primary: #10b981;
        --accent: #0284c7;
        --danger: #ef4444;
      }
      /* Light theme overrides */
      :root[data-theme="light"] {
        --text: #0f172a;
        --muted: #475569;
        --bg: #f8fafc;
        --surface: #ffffff;
        --border: #e2e8f0;
        --primary: #0ea5e9;
        --accent: #10b981;
        --danger: #ef4444;
      }
      * { box-sizing: border-box; }
      body { margin: 0; font-family: 'Inter', sans-serif; color: var(--text); background: var(--bg); min-height: 100vh; display: grid; place-items: center; }
      .container { width: 100%; max-width: 420px; padding: 1.5rem; }
      .top { display: flex; align-items: center; justify-content: space-between; margin-bottom: 1rem; gap: .5rem; }
      .back { color: var(--primary); text-decoration: none; font-weight: 600; }
      .back:hover { text-decoration: underline; }
      h1 { margin: 0; font-size: 1.5rem; }
      .spacer { flex: 1; }
      .theme-toggle {
        appearance: none;
        border: none;
        background: none;
        cursor: pointer;
        color: var(--muted);
        font-size: 1.125rem;
        padding: 0;
        transition: color 0.2s ease;
      }
      .theme-toggle:hover {
        color: var(--text);
      }

      .calc { background: var(--surface); border: 1px solid var(--border); border-radius: 12px; overflow: hidden; box-shadow: 0 10px 30px rgba(0,0,0,.35); }
      .display { padding: 1rem; text-align: right; background: linear-gradient(180deg, rgba(2,132,199,.15), transparent); border-bottom: 1px solid var(--border); }
      .prev { color: var(--muted); min-height: 22px; font-size: .95rem; }
      .curr { font-size: 2.25rem; font-weight: 700; line-height: 1.2; word-break: break-all; }

      .keys { display: grid; grid-template-columns: repeat(4, 1fr); gap: 8px; padding: 12px; }
      button { appearance: none; border: 1px solid var(--border); background: rgba(255,255,255,.03); color: var(--text); padding: .9rem; border-radius: 10px; font-size: 1.1rem; font-weight: 600; cursor: pointer; transition: transform .05s ease, background .2s ease, border-color .2s ease, box-shadow .2s ease; }
      button:hover { background: rgba(255,255,255,.06); border-color: #3b4a63; }
      button:active { transform: translateY(1px); }
      .op { color: var(--primary); }
      .eq { background: linear-gradient(135deg, var(--primary), var(--accent)); border: none; color: #081217; box-shadow: 0 6px 16px rgba(16,185,129,.25); }
      .eq:hover { filter: brightness(1.05); }
      .span-2 { grid-column: span 2; }
      .danger { color: #fecaca; border-color: rgba(239,68,68,.35); }
      .danger:hover { background: rgba(239,68,68,.12); border-color: rgba(239,68,68,.5); }

      .help { text-align: center; color: var(--muted); font-size: .85rem; padding-top: .5rem; padding-bottom: 1rem; }
      .sr-only { position: absolute; width: 1px; height: 1px; padding: 0; margin: -1px; overflow: hidden; clip: rect(0, 0, 0, 0); white-space: nowrap; border: 0; }
    </style>
  </head>
  <body>
    <main class="container">
      <div class="top">
        <a href="/test-apps" class="back">← Back</a>
        <h1>Calculator</h1>
        <div class="spacer"></div>
        <button id="themeToggle" class="theme-toggle" aria-label="Toggle dark/light mode">☀</button>
      </div>

      <section class="calc" role="application" aria-label="Calculator">
        <div class="display" aria-live="polite">
          <div class="prev" id="prev">&nbsp;</div>
          <div class="curr" id="curr">0</div>
        </div>
        <div class="keys">
          <button data-action="clear" class="danger">AC</button>
          <button data-action="sign" title="Toggle sign">±</button>
          <button data-action="percent" title="Percent">%</button>
          <button data-op="/" class="op" title="Divide">÷</button>

          <button data-digit="7">7</button>
          <button data-digit="8">8</button>
          <button data-digit="9">9</button>
          <button data-op="*" class="op" title="Multiply">×</button>

          <button data-digit="4">4</button>
          <button data-digit="5">5</button>
          <button data-digit="6">6</button>
          <button data-op="-" class="op" title="Subtract">−</button>

          <button data-digit="1">1</button>
          <button data-digit="2">2</button>
          <button data-digit="3">3</button>
          <button data-op="+" class="op" title="Add">+</button>

          <button data-action="del" title="Backspace">⌫</button>
          <button data-digit="0" class="span-2">0</button>
          <button data-action="dot" title="Decimal">.</button>
          <button data-action="equals" class="eq" title="Equals">=</button>
        </div>
        <div class="help">Keyboard: 0-9 . + - * / Enter Backspace Esc</div>
      </section>
    </main>

    <script>
      // @ts-nocheck
      (function() {
        // THEME: init from storage or system
        const root = document.documentElement;
        // Use the same storage key as login-demo
        const savedTheme = localStorage.getItem('login-theme');
        const prefersLight = window.matchMedia && window.matchMedia('(prefers-color-scheme: light)').matches;
        const initialTheme = savedTheme || (prefersLight ? 'light' : 'dark');
        
        // Set initial theme
        if (savedTheme) {
          root.setAttribute('data-theme', savedTheme);
          const themeToggle = document.getElementById('themeToggle');
          if (themeToggle) themeToggle.textContent = savedTheme === 'light' ? '☾' : '☀';
        } else {
          // Check system preference
          root.setAttribute('data-theme', initialTheme);
          const themeToggle = document.getElementById('themeToggle');
          if (themeToggle) themeToggle.textContent = initialTheme === 'light' ? '☾' : '☀';
          localStorage.setItem('login-theme', initialTheme);
        }

        const themeToggle = document.getElementById('themeToggle');
        if (themeToggle) {
          themeToggle.addEventListener('click', () => {
            const isLight = root.getAttribute('data-theme') === 'light' ? false : true;
            root.setAttribute('data-theme', isLight ? 'light' : 'dark');
            themeToggle.textContent = isLight ? '☾' : '☀';
            localStorage.setItem('login-theme', isLight ? 'light' : 'dark');
          });
        }

        const prevEl = document.getElementById('prev');
        const currEl = document.getElementById('curr');

        let current = '0';
        let previous = null; // string | null
        let operator = null; // '+', '-', '*', '/' | null
        let overwrite = false;

        function format(nStr) {
          const parts = String(nStr).split('.');
          const i = parts[0];
          const d = parts[1];
          const iFmt = Number(i).toLocaleString('en-US');
          return d !== undefined ? `${iFmt}.${d}` : iFmt;
        }

        function updateDisplay() {
          if (currEl) currEl.textContent = format(current);
          if (previous !== null && operator) {
            if (prevEl) prevEl.textContent = `${format(previous)} ${operatorSymbol(operator)}`;
          } else {
            if (prevEl) prevEl.innerHTML = '&nbsp;';
          }
        }

        function operatorSymbol(op) {
          return op === '/' ? '÷' : op === '*' ? '×' : op;
        }

        function inputDigit(d) {
          if (overwrite) { current = d; overwrite = false; updateDisplay(); return; }
          if (current === '0') current = d; else current += d; updateDisplay();
        }

        function inputDot() {
          if (overwrite) { current = '0.'; overwrite = false; updateDisplay(); return; }
          if (!current.includes('.')) { current += '.'; updateDisplay(); }
        }

        function clearAll() {
          current = '0'; previous = null; operator = null; overwrite = false; updateDisplay();
        }

        function del() {
          if (overwrite) { current = '0'; overwrite = false; updateDisplay(); return; }
          if (current.length > 1) current = current.slice(0, -1); else current = '0';
          updateDisplay();
        }

        function toggleSign() {
          if (current === '0') return; current = current.startsWith('-') ? current.slice(1) : '-' + current; updateDisplay();
        }

        function percent() {
          const val = parseFloat(current);
          if (!isNaN(val)) { current = String(val / 100); updateDisplay(); }
        }

        function chooseOperator(op) {
          if (operator && !overwrite) {
            compute();
          }
          previous = current;
          operator = op;
          overwrite = true;
          updateDisplay();
        }

        function compute() {
          if (operator === null || previous === null) return;
          const a = parseFloat(previous);
          const b = parseFloat(current);
          let result = 0;
          switch (operator) {
            case '+': result = a + b; break;
            case '-': result = a - b; break;
            case '*': result = a * b; break;
            case '/': result = b === 0 ? NaN : a / b; break;
          }
          current = String(result);
          previous = null;
          operator = null;
          overwrite = true;
          updateDisplay();
        }

        document.addEventListener('click', (e) => {
          const t = e.target;
          if (!(t instanceof HTMLElement)) return;
          const dataset = t.dataset || {};
          if (dataset.digit) return inputDigit(dataset.digit);
          if (dataset.op) return chooseOperator(dataset.op);
          if (dataset.action === 'dot') return inputDot();
          if (dataset.action === 'equals') return compute();
          if (dataset.action === 'clear') return clearAll();
          if (dataset.action === 'del') return del();
          if (dataset.action === 'sign') return toggleSign();
          if (dataset.action === 'percent') return percent();
        });

        document.addEventListener('keydown', (e) => {
          if (e.key >= '0' && e.key <= '9') return inputDigit(e.key);
          if (e.key === '.') return inputDot();
          if (e.key === '+' || e.key === '-' || e.key === '*' || e.key === '/') return chooseOperator(e.key);
          if (e.key === 'Enter' || e.key === '=') { e.preventDefault(); return compute(); }
          if (e.key === 'Backspace') return del();
          if (e.key === 'Escape') return clearAll();
        });

        updateDisplay();
      })();
    </script>
  </body>
</html>
